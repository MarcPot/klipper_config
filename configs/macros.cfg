[gcode_macro google_heat]
gcode =
  M140 S105
#	Macros
#	pre-print-prep macro
[gcode_macro pre_print_prep]
gcode =
        SET_PIN PIN=caselight VALUE=0.3 ;turn on lighting
        abs_warmup_temp ;tell bed to warm up
		G32	;adjust bed so its square to gantry
        BED_MESH_CALIBRATE ;Run Bed Mesh
        DETACH_PROBE

#	macro to level the gantry.  use G32 in the terminal to call
[gcode_macro G32]
gcode =
  BED_MESH_CLEAR
  {% if "x" not in printer.toolhead.homed_axes %} ; G28 Home if needed
    M117 "Homing X"
    G28 X
  {% endif %}
  {% if "y" not in printer.toolhead.homed_axes %} ; G28 Home if needed
    M117 "Homing Y"
    G28 Y
  {% endif %}
  {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
    M117 "Homing Z"
    G28 Z
  {% endif %}
  M117 "Leveling gantry."
  Z_TILT_ADJUST		                          ; Level Gantry
  M117 "Z home"
  G28 Z                   	                      ; Home Z with Cleaned Nozzle before printing

[gcode_macro nozzle_brush_location]
gcode = 
    G1 X-8.000 Y144.000 F6000

[gcode_macro BEDMESHLOAD]
gcode =
  BED_MESH_PROFILE LOAD={printer.heater_bed.target}C

[gcode_macro POWER_OFF_PRINTER]
gcode =
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}

[gcode_macro POWER_ON_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="on")}

#	macro to level bed to the gantry
[gcode_macro square_bed_to_machine]
gcode =
		G32	;adjust bed so its square to gantry

#	mesh bed level the machine
[gcode_macro mesh_bed_level_machine]
gcode =
		BED_MESH_CALIBRATE	;Run Bed Mesh

#	combined print start gcode macro that takes into account temperature from the slicer
[gcode_macro print_start]
gcode =
    {% set EXTRUDER = params.EXTRUDER|default(260) %}
    {% set BED = params.BED|default(110) %}
  SET_PIN PIN=caselight VALUE=0.3
  BED_MESH_CLEAR
  {% if "x" not in printer.toolhead.homed_axes %} ; G28 Home if needed
    M117 "Homing X"
    G28 X
  {% endif %}
  {% if "y" not in printer.toolhead.homed_axes %} ; G28 Home if needed
    M117 "Homing Y"
    G28 Y
  {% endif %}
  print_start_1			;print start macro 1
  M190 S{BED}			;set bed temperature and wait
  M109 S{EXTRUDER}		;set hotend temperature and wait
  nozzle_clean
  G32
  #DETACH_PROBE			;set bed temperature and do not wait
  print_start_2			;print start macro 2
  BEDMESHLOAD
  prime_line_regular	;draw prime line in corner of bed
  

[gcode_macro print_start_1]
gcode =
	M104 S0 #cancel set temp
	M107 #turn cooling fans off
	G21  # set units to mm
	G90  # use absolute coordinates
	M83	# use relative extrusion
	G92 E0.0  # reset e count
	M220 S100 # reset speed multiplier
	nozzle_brush_location	#move to nozzle scrubber bucket

[gcode_macro print_start_2]
gcode =
	nozzle_clean		#clean nozzle
	
[gcode_macro prime_line_regular]
gcode =
	G1 Z20 F6000
	G1 X20 Y40 F12000
	G1 Z0.5 F600
	G1 Y105 E15 F1000
	G1 Y115 E2.5 F1000
	G92 E0.0             ;set extruder to Zero
    G92 Z0.5             ;let printer know its at 0.5
    G90                  ;set to absolute

#    Use print_end for you slicer ending script    
[gcode_macro print_end]
gcode =
	G91  							#relative positioning
	G0 E-0.3 F4800  				#retract 5mm of filament
	G0 Z+1.00 X-2 Y-2 F6000  		#short quick move to disengage from print
	G0 Z+5.00  F6000  				#move Z-Axis 1mm away from part

	G90  					#absolute positioning
	nozzle_brush_location
	G91  					#relative positioning
	G0 E10 F400			#extrude filament to get better blob on end
	G0 E-0.30 F1800  		#retract additional filament to move out of melt zone
	G90 					#absolute positioning
    
	M104 S0  				#turn off hotend
    {% if printer.heater_bed.target > 40 %}
        M140 S{printer.heater_bed.target-10}
    {% else %}
        M140 S0
    {% endif %}
    

	#z bed placement control for end of print
    SAVE_GCODE_STATE NAME=END_state
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 130|float %}    #if z position >= 130mnm do the following
        G91              #relative positioning
        G1 Z+10 F600     #move z down 10mm
        G90              #absolute positioning
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z130 F600     #move z to 130mm
    {% endif %}
    RESTORE_GCODE_STATE NAME=END_state

	M106 S0  				#shut off part cooling fans
	#M84					#turn off motors
	clear_pause				#clear pause state encase it was enabled

#	Macro to execute when pausing printer
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    nozzle_brush_location

#	Macro to execute when resuming printer
[gcode_macro RESUME]
rename_existing = BASE_RESUME
gcode =
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

#	Macro to execute when canceling a print
[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode =
    print_end #execute the print end macro
	CLEAR_PAUSE
  	SDCARD_RESET_FILE
  	BASE_CANCEL_PRINT

#	Notify when ABS Timer is complete
[delayed_gcode notify_chamber]
gcode =
    {% set initial_duration = params.initial_duration|default(0) %}

 {gcode.action_respond_info("action =prompt_begin Chamber Preheated")}
 {action_respond_info("action =prompt_choice OK")}
 {action_respond_info("action =prompt_show")}

#	Set Temps for chamber warmup when printing with abs 
[gcode_macro abs_warmup_temp]
gcode =
    {% set TEMP = params.TEMP|default(110) %}

		M106 S255					#turn part cooling fan on to blow heat around chamber
		M190 S{TEMP}				#set bed temperature and wait
		G28							#home machine
		G0 X90 Y90 Z20 F3000		#move to center of bed
		UPDATE_DELAYED_GCODE ID=notify_chamber DURATION=1200

#	Notify when filament is unloaded and ready to reload
[delayed_gcode notify_extruder_reload]
gcode =
    {% set initial_duration = params.initial_duration|default(0) %}

 {action_respond_info("action =prompt_begin Ready to Load Filament")}
 {action_respond_info("action =prompt_choice OK")}
 {action_respond_info("action =prompt_show")}


[gcode_macro load_unload_prep]
gcode =
    {% set EXTRUDER = params.EXTRUDER|default(245) %}
    turn_fans_off			#turn part cooling fans off
    nozzle_brush_location		#move to area where can easily load filament
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 50|float %}    #if z position >= 50mnm do the following
        #do nothing
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z50 F600     #move z to 50mm
    {% endif %}
    M109 S{EXTRUDER}		#set hotend temperature and wait	
    M83						#relative positioning on extruder

#	Macro to Load Filament
[gcode_macro load_filament]
gcode =
    {% set EXTRUDER = params.EXTRUDER|default(245) %}
    load_unload_prep EXTRUDER={EXTRUDER}

    G0 E120 F400  			#prime extruder
    M109 S0					#turn off extruder
    UPDATE_DELAYED_GCODE ID=notify_extruder_load DURATION=10

#	Notify when filament is loaded
[delayed_gcode notify_extruder_load]
gcode =
    {% set initial_duration = params.initial_duration|default(0) %}
    {action_respond_info("action =prompt_begin FIlament is Loaded")}
    {action_respond_info("action =prompt_choice OK")}
    {action_respond_info("action =prompt_show")}

#	Macro to Unload Filament
[gcode_macro unload_filament]
gcode =
    load_unload_prep EXTRUDER={EXTRUDER}
    {% set EXTRUDER = params.EXTRUDER|default(245) %}
    
    G0 E5 F400			#extrude filament to get better blob on end
    G0 E-600 F900  		#retract additional filament to move out of melt zone
    UPDATE_DELAYED_GCODE ID=notify_extruder_reload DURATION=10

#	Scrubs the nozzle on the brass brush or silicone wiper located in the build chamber
[gcode_macro nozzle_clean]
gcode =
	SAVE_GCODE_STATE NAME=clean_nozzle_state	#store current nozzle location
	Wipe_Nozzle
	RESTORE_GCODE_STATE NAME=clean_nozzle_state MOVE=1 #restore current nozzle location

#   Settings for the nozzle wiper
[gcode_macro Nozzle_Wiper_Variables]
# the values below are for a wiper located at (-8, 125)
variable_purge_x =       -8  # x purge location
variable_purge_y =       112 # y purge location
variable_purge_x_entry = 0   # x entry location before going to the purge location
variable_purge_y_entry = 112 # y entry location before going to the purge location
variable_wipe_dx =       0   # distance to move in x from the purge position in order to wipe
variable_wipe_dy =       16  # distance to move in y from the purge position in order to wipe
variable_wipe_count =    2   # number of wipe cycles
variable_travel_speed =  300 # how fast travel speeds will be performed
variable_entry_speed =   100 # how fast to move from the entry location to the purge location
variable_wipe_speed =    50  # how fast to move when wiping
variable_purge_speed =   7   # how fast to extrude in mm/s when purging
variable_purge_fan =     64  # default fan speed out of 255 when purging
variable_wipe_fan =      128 # default fan speed out of 255 when wiping
gcode =

#   Move above the purge bucket
[gcode_macro Go_To_Purge_Location]
gcode =
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set St = printer["gcode_macro Nozzle_Wiper_Variables"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}

    {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}
        G1 X{Pxe} Y{Pye} F{St}
        G1 X{Px} Y{Py} F{Se}
    {% endif %}

#   Wipe the nozzle on the brass brush or silicone wiper
[gcode_macro Wipe_Nozzle]
gcode =
    {% set OLD_FAN_SPEED = params.OLD_FAN_SPEED|default(-1) %}
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set Wdx = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dx|float %}
    {% set Wdy = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dy|float %}
    {% set Wc = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_count|int %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}
    {% set Sw = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_fan %}
    
    {% if OLD_FAN_SPEED|int == -1 %}
        {% set old_Sf = printer.fan.speed %}
    {% else %}
        {% set old_Sf = OLD_FAN_SPEED %}
    {% endif %}
    
    {% if printer.fan.speed < Sf %}
        {% set wait_for_fan = True %}
    {% else %}
        {% set wait_for_fan = False %}
    {% endif %}

    # go to purge location
    Go_To_Purge_Location

    # set fan speed for wiping
    M106 S{Sf}
    
    # wait for fan to cool filament if needed
    {% if wait_for_fan %}
        G4 P800
    {% endif %}

    # wipe nozzle
    G1 X{Px + Wdx} Y{Py + Wdy} F12000
    {% for i in range(Wc) %}
        G1 X{Px} Y{Py} F{Sw}
        G1 X{Px + Wdx} Y{Py + Wdy} F{Sw}
    {% endfor %}

    # move away from wiper
    G1 X{Pxe + Wdx} Y{Pye + Wdy} F{Se}

    # restore fan speed
    M106 S{old_Sf}

#   Purge material into the bucket
[gcode_macro Purge]
gcode =
    {% set EXACT_TEMP = params.EXACT_TEMP|default(False) %}
    {% set TEMPERATURE = params.TEMPERATURE|default(230) %}
    {% set FEED_AMOUNT = params.FEED_AMOUNT|default(15) %}

    {% set Sp = printer["gcode_macro Nozzle_Wiper_Variables"].purge_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].purge_fan %}
    {% set old_Sf = printer.fan.speed %}
    
    # go to purge location
    Go_To_Purge_Location

    # wait for hotend
    {% if EXACT_TEMP == 'True' or printer.extruder.temperature < TEMPERATURE|float %}
        M109 S{TEMPERATURE}
    {% endif %}

    # set fan speed for purging
    M106 S{Sf}

    # extrude
    M83
    G1 E{FEED_AMOUNT|float - 3} F{Sp}
    G1 E3 F100
    G92 E0.0

    # wait
    G4 P800

    # wipe the nozzle
    Wipe_Nozzle OLD_FAN_SPEED={old_Sf}

#	Macro for M600 - filament out pause resume 
[gcode_macro M600]
gcode =
    {% set X = params.X|default(75) %}
    {% set Y = params.Y|default(0) %}
    {% set Z = params.Z|default(10) %}
	{% if printer.toolhead.status == "Ready" %}
		# do nothing
	{% else %}
    	M117 Filament Change
		SAVE_GCODE_STATE NAME=M600_state
    	PAUSE
		G91
		G1 E-5 F4000
		G1 Z{Z}
		G90
		G1 X{X} Y{Y} F3000
		G0 E15 F1800			#extrude filament to get better blob on end
		G0 E-150 F4800  		#retract additional filament to move out of melt zone
		RESTORE_GCODE_STATE NAME=M600_state
	{% endif %}

#	Use this command to load filament during a mid print filament swap	
[gcode_macro SWAP_RESUME] 
gcode =
 	M117 Printing...
	LOAD_FILAMENT
	RESUME

#	Macro to Turn Fans Off
[gcode_macro turn_fans_off]
gcode =
	M107

#	Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing = M204.1
gcode =

   {% if 'P' in params %}{% set accel = params.P %}{% endif %}
   {% if 'S' in params %}{% set accel = params.S %}{% endif %}
   {% if 'T' in params %}{% set accel = params.T %}{% endif %}

    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float / 2.0}

#	Macro to Attach the Magnetic Probe
[gcode_macro attach_probe_to_toolhead]
gcode =
	ATTACH_PROBE
	
#	Macro to Detach the Magnetic Probe
[gcode_macro detach_probe_from_toolhead]
gcode =
	DETACH_PROBE
