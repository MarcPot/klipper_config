
[display]
lcd_type =      uc1701
cs_pin =        display:EXP1_3
a0_pin =        display:EXP1_4
rst_pin =       display:EXP1_5
contrast =      63
encoder_pins =  ^display:EXP2_5, ^display:EXP2_3
click_pin =     ^!display:EXP1_2
display_group = __voron_display

[output_pin beeper]
pin = display:EXP1_1

[neopixel fysetc_mini12864]
#	To control Neopixel RGB in mini12864 display
pin =           display:EXP1_6
chain_count =   3
color_order =   RGB
initial_RED =   1.0
initial_GREEN = 0.0
initial_BLUE =  0.0

#	Set RGB values on boot up for each Neopixel. 
#	Index 1 = display, Index 2 and 3 = Knob

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode =
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=1
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=1
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 TRANSMIT=1

[board_pins display]
aliases =
    # Common EXP1 header found on many "all-in-one" ramps clones
    EXP1_1=ar8,  EXP1_3=ar6,  EXP1_5=ar4,  EXP1_7=ar2,  EXP1_9=<GND>,
    EXP1_2=ar9,  EXP1_4=ar7,  EXP1_6=ar5,  EXP1_8=ar3,  EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=ar12, EXP2_3=ar16, EXP2_5=ar18, EXP2_7=<GND>, EXP2_9=<GND>,
    EXP2_2=ar13, EXP2_4=ar17, EXP2_6=ar11, EXP2_8=<RST>,EXP2_10=ar19
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi"
    # Note, some boards wire: EXP2_8=<RST>, EXP2_10=ar41

[display_template _vheater_temperature]
param_heater_name = "extruder"
text =
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position = 0, 0
text = { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position = 0, 10
text =
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position = 1, 0
text: { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position = 1, 10
text =
  {% set progress = printer.display_status.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position = 1, 10
text =
  {% set progress = printer.display_status.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position = 2, 10
text =
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

#########################################################
# This section defines the actual chamber temp. field,
# replace 'temperature_sensor chamber' as necessary
#########################################################
[display_data __voron_display chamber]
position = 2, 0
text =
  {% set chamber = printer['temperature_sensor chamber'] %}
	~chamber~
	{ "%3.0f" % (chamber.temperature,) }
	~degrees~

[display_data __voron_display print_status]
position = 3, 0
text =
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "V2.576 " }
	~voron~
  {% endif %}

[display_glyph chamber]
data =
	................
    ****************
    *....*....*....*
    *....*....*....*
    *....******....*
    *..............*
    *..............*
    *.....****.....*
    *.***.*..*.***.*
    *.....****.....*
    *......**......*
    *..............*
    *.************.*
    *...*......*...*
    ****************
    ................
	
[display_glyph voron]
data =
   .......**.......
   .....******.....
   ....********....
   ..************..
   .*****..**..***.
   .****..**..****.
   .***..**..*****.
   .**..**..******.
   .******..**..**.
   .*****..**..***.
   .****..**..****.
   .***..**..*****.
   ..************..
   ....********....
   .....******.....
   .......**.......